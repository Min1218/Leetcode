Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
Example 4:

Input: candidates = [1], target = 1
Output: [[1]]
Example 5:

Input: candidates = [1], target = 2
Output: [[1,1]]
 

Constraints:

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
All elements of candidates are distinct.
1 <= target <= 500
~~~~~~~~~~~~~~~~~~~~~~~~

"""
回溯算法
Time Complexity: O(N^(T\M+1)), T is the target value, and M is the mininal value among the candidates
我们把回溯的展开过程可以看做一个N叉树，回溯的时间复杂度即为访问这棵树的所有节点。每一分叉的最大深度为T/M，所以一个深度为
T/M的N叉树的节点个数为N^(T/M + 1)
Space Complexity: O(T\M) -> the function call stack

"""
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        
        def backtrack(i, path, size, rem):
            if rem == 0:
                res.append(path[:])
                return

            for j in range(i,size):
                if rem < candidates[j]:
                    continue
                path.append(candidates[j])
                backtrack(j, path, size, rem - candidates[j])
                path.pop()
                
        size = len(candidates)
        path, res = [], []
        backtrack(0, path, size, target)
        return res
