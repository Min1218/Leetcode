Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.

~~~~~~~~~~~~~~~
"""
n: word length
insert: O(n), O(n)
search and startsWith: O(n), O(1)
"""
class Trie:
    #前缀树
    #https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/pythonjian-dan-shi-xian-by-powcai/
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.trie = {}
    
    def insert(self, word):
        node = self.trie
        for c in word:
            if c not in node:
                node[c] = {}
            node = node[c]
        node['#'] = '#'
    
    def search(self, word):
        node = self.trie
        for w in word:
            if w in node:
                node = node[w]
            else:
                return False
        if '#' in node:
            return True
        else:
            return False
    def startsWith(self, word):
        node = self.trie
        for w in word:
            if w in node:
                node = node[w]
            else:
                return False
        return True

# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
