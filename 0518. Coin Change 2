You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.

 

Example 1:

Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
Example 2:

Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.
Example 3:

Input: amount = 10, coins = [10] 
Output: 1
 

Note:

You can assume that

0 <= amount <= 5000
1 <= coin <= 5000
the number of coins is less than 500
the answer is guaranteed to fit into signed 32-bit integer
~~~~~~~~~~~~~~

"""
完全背包的组合问题：不考虑元素顺序,即[1,5]和[5,1]是一样的
nums放在外循环，target在内循环。且内循环正序
O(n * s): n = len(coins), s = amount
O(s)
"""
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:

        dp = [0] * (amount + 1)
        dp[0] = 1
        
        for i in range(len(coins)):
            for j in range(coins[i], amount + 1):
                
                dp[j] += dp[j - coins[i]] 
        
        return dp[-1]
        
