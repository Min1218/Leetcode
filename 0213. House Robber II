You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.
Example 2:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 3:

Input: nums = [0]
Output: 0
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 1000

~~~~~~~~~~~
"""
把此环状排列房间问题约化为两个单排排列房间子问题
O(N); O(1)
"""
class Solution:
    def rob(self, nums: List[int]) -> int:
        def rob_simple(num):
            if len(num) == 1:
                return num[0]
            first, second = num[0], max(num[0], num[1])
            for i in range(2, len(num)):
                third = max(second, first + num[i])
                first, second = second, third
            return second
        
        size = len(nums)
        if not size:
            return 0
        if size == 1:
            return nums[0]
        
        return max(rob_simple(nums[:-1]), rob_simple(nums[1:]))
