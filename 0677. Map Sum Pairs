Implement the MapSum class:

MapSum() Initializes the MapSum object.
void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.
int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.
 

Example 1:

Input
["MapSum", "insert", "sum", "insert", "sum"]
[[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]
Output
[null, null, 3, null, 5]

Explanation
MapSum mapSum = new MapSum();
mapSum.insert("apple", 3);  
mapSum.sum("ap");           // return 3 (apple = 3)
mapSum.insert("app", 2);    
mapSum.sum("ap");           // return 5 (apple + app = 3 + 2 = 5)
 

Constraints:

1 <= key.length, prefix.length <= 50
key and prefix consist of only lowercase English letters.
1 <= val <= 1000
At most 50 calls will be made to insert and sum.
~~~~~~~~~~~~~
"""
reference: https://leetcode-cn.com/problems/map-sum-pairs/solution/677-jian-zhi-ying-she-han-zi-dian-shu-zai-nei-de-s/
insert: O(n); O(n)
sum: O(m) - m: total input
"""
class MapSum:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.map = {}
        

    def insert(self, key: str, val: int) -> None:
        node = self.map
        for c in key:
            if c not in node:
                node[c] = {}
            node = node[c]
        node['#'] = val

    def sum(self, prefix: str) -> int:
        node = self.map
        for c in prefix:
            if c not in node: #预先判断map中是否有prefix
                return 0   
            node = node[c]
        res = 0
        
        def dfs(node): # 深度搜索找到所有与前缀相同的word的values和
            nonlocal res
            for c in node:
                if c == '#':
                    res += node['#']
                else:
                    dfs(node[c])
                    
        dfs(node)
        return res
