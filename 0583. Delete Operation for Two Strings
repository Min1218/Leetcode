Given two words word1 and word2, find the minimum number of steps required to make word1 and word2 the same, where in each step you can delete one character in either string.

Example 1:
Input: "sea", "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Note:
The length of given words won't exceed 500.
Characters in given words can only be lower-case letters.
~~~~~~~~~~~~~~~~~~~~~~

"""
找最长公共序列
1. 原问题：长度为m, n的字符串的最长公共子序列； 子问题：长度为i,j的字符串的最长公共子序列
2. 状态： dp[i][j]表示word1[:i]和word2[:j]的最长公共子序列的长度
3. 初始化：dp[i][0],dp[0][j]都为0.
4. 状态转移方程：dp[i][j] = dp[i-1][j-1]+1 if word1[i-1]==word2[j-1] else max(dp[i-1][j],dp[i][j-1])

reference：https://leetcode-cn.com/problems/delete-operation-for-two-strings/solution/dong-tai-gui-hua-by-whosedangeroussmile/
O(m * n); O(m * n)
"""
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:

        m, n = len(word1), len(word2)
        dp = [ [0] * (n + 1) for i in range(m + 1)]
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        return m + n - 2 * dp[m][n]
        
