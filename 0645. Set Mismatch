The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number.

Given an array nums representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.

Example 1:
Input: nums = [1,2,2,4]
Output: [2,3]
Note:
The given array size will in the range [2, 10000].
The given array's numbers won't have any order.

~~~~~~~~~~~~
"""
1. 用hashtable记录每个数字出现次数 O(n), O(n)
2. 用正负号判断
第一次遍历，将nums中的value对应index上的值变为负值；如果某一个index的值已经为负，说明该值为duplicate value
第二次遍历，找到nums中值为非负的index，说明nums中没有index + 1的值，即为missing value
O(n), O(1)
"""
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        n = len(nums)
        for i in range(n):
            j = abs(nums[i]) #abs很必须
            if nums[j - 1] < 0:
                dup = j
            else:
                nums[j - 1] = -(nums[j - 1])
        for i in range(n):
            if nums[i] >= 0:
                return [dup, i + 1]
        return [] 
        
#         n = len(nums)
#         hashtable = {}
#         res = [0, 0]
        
#         for i in range(len(nums)):
#             hashtable[nums[i]] = hashtable.get(nums[i], 0) + 1
            
#         for i in range(1, n + 1):
#             if i not in hashtable:
#                 res[1] = i
#             elif i in hashtable and hashtable[i] > 1:
#                 res[0] = i
#         return res
