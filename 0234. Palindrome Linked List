Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        """
        Method 1: use array
        We can copy the Linked List into an Array the check if the Array is a palindrome.
        O(n) - n is the no. of nodes in the linked list; O(n)
        Method 2: reverse the first half in-place
        changing the input to avoid using O(n) extra space.
        reference - https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-de-san-chong-fang-fa-by-coldme-2/
        1.用快慢指针遍历的同时翻转前半部分，2. 然后与后半部分比较, 3.翻转前半部分，把链表回复成原来
        1. Find the middle node of the linked list using slow and fast pointers, during this process, reverse the first half in-place; 2. then compare it whith the second half. 3. Afterwards, reverse the first half to put the list back together.
        O(n); O(1)
        """
#方法一
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """

        l = []
        cur = head
        while cur:
            l.append(cur.val)
            cur = cur.next
        
        return l == l[::-1] #写法省去了left，right左右指针
 
#方法二
    def isPalindrome(self, head):
        slow, fast, pre = head, head, None
        Flag = True
        # 1
        while fast and fast.next:
            fast = fast.next.next #容易出错点
            temp = slow.next
            slow.next = pre
            pre = slow
            slow = temp
        if fast: # odd length
            node1 = pre
            node2 = slow.next
        else:
            node1 = pre
            node2 = slow
        # 2
        while node1 and node2:
            if node1.val != node2.val:
                Flag = False
            node1, node2 = node1.next, node2.next
        # 3 -> time limit exceeded
        # back = slow
        # while pre:
        #     temp = pre.next
        #     pre.next = back
        #     back = pre
        #     pre = temp
        # print(head)
        return Flag
