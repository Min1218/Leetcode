Given an integer array nums, return all possible subsets (the power set).

The solution set must not contain duplicate subsets.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.
~~~~~~~~~~~~~`

"""
时间复杂度：O(n \times 2^n), 一共 2^n2 个状态，每种状态需要O(n)的时间来构造子集。
空间复杂度：O(n)。即构造子集使用的临时数组 t 的空间代价。
"""
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        
        def backtrack(begin, path):
            if len(path) <= size:
                res.append(path[:])
            else:
                return
            for i in range(begin, size):
                path.append(nums[i])
                backtrack(i + 1, path)
                path.pop()
                
        size = len(nums)
        if not size:
            return [[]]
        res, path = [], []
        backtrack(0, path)
        return res
