You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.
 

Constraints:

1 <= strs.length <= 600
1 <= strs[i].length <= 100
strs[i] consists only of digits '0' and '1'.
1 <= m, n <= 100
~~~~~~~~~~~~~~~~~~~~~

"""
背包问题
Method 1：
状态转移方程 dp[i][j][k]表示[0,i]时装了j个0和k个1
dp[i][j][k] = max(dp[i - 1][j][k], dp[i - 1][j - zeros][k - ones] + 1)
Method 2:
优化空间。因为当前行值参考了上一行的值，因此可以使用 滚动数组， 从后向前赋值。
reference: https://leetcode-cn.com/problems/ones-and-zeroes/solution/dong-tai-gui-hua-zhuan-huan-wei-0-1-bei-bao-wen-ti/
"""
class Solution:
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        
        # Method 2: dp 2维
        dp = [ [0] * (n + 1) for i in range(m + 1)]
        for i in range(1, len(strs) + 1):
            zeros = strs[i - 1].count('0')
            ones = strs[i - 1].count('1')
            for j in range(m, zeros - 1, -1):
                for k in range(n, ones - 1, -1):
                    dp[j][k] = max(dp[j][k], dp[j - zeros][k - ones] + 1)
        return dp[-1][-1]
        
#         # Method 1: dp 3维
#         dp = [[ [0] * (n + 1) for i in range(m + 1)] for j in range(len(strs) + 1)]
        
#         for i in range(1, len(strs) + 1):
#             zeros = strs[i - 1].count('0')
#             ones = strs[i - 1].count('1')
#             for j in range(m + 1):
#                 for k in range(n + 1):
#                     dp[i][j][k] = dp[i - 1][j][k]
#                     if j >= zeros and k >= ones:
#                         dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - zeros][k - ones] + 1)
        
#         return dp[-1][-1][-1]
