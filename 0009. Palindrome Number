Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

Follow up: Could you solve it without converting the integer to a string?

 

Example 1:

Input: x = 121
Output: true
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
Example 4:

Input: x = -101
Output: false
 

Constraints:

-231 <= x <= 231 - 1

~~~~~~~~
"""
反转一半数字，考虑x长度为奇数或者偶数的情况
O(\log_{10}(n): divided the input by 10 for every iteration
O(1): reverseNum
"""
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0 or (x % 10 == 0 and x != 0):
            return False
        reverseNum = 0
        
        while x > reverseNum:
            reverseNum = reverseNum * 10 + x % 10
            x = x // 10
        print(x, reverseNum)
        return x == reverseNum or x == reverseNum // 10
