Write a program to find the node at which the intersection of two singly linked lists begins.

For example:
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). 
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes 
before the intersected node in A; There are 3 nodes before the intersected node in B.

~~~~~~~~~~~~~~~~~
        # two pointers; 
        # if two lists have intersection, then their last nodes must be the same one.
        # so when p or q reach the end of a list, switch to the head of another list,
        # find the first same node, which is the intersection.
        # O(m + n) - m, n are the length of linked list A, B; O(1)
        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:

        p, q  = headA, headB
        while p != q:
            if p:
                p = p.next
            else:
                p = headB
            if q:
                q = q.next
            else:
                q = headA
        
        return p
