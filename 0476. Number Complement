Given a positive integer num, output its complement number. The complement strategy is to flip the bits of its binary representation.

 

Example 1:

Input: num = 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
Example 2:

Input: num = 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.
 

Constraints:

The given integer num is guaranteed to fit within the range of a 32-bit signed integer.
num >= 1
You could assume no leading zero bit in the integer’s binary representation.
This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/

~~~~~~~~~~~
"""
将num的二位制的数字与1进行异或
通过将1不断左移1位，找到刚大于num的数，然后 - 1即为和num同长度全为1的bits
O(1); O(1)
"""
class Solution:
    def findComplement(self, num: int) -> int:
        num_large = 1
        while num_large <= num:
            num_large = num_large << 1
        num_large -= 1
        
        return num_large ^ num
    
