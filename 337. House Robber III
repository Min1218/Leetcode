The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:

Input: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

Output: 7 
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:

Input: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.
~~~~~~~~~~~~~~~~~
"""
自底向上 - 后序遍历
对当前node计算两种情况: 
1. 抢当前node，那么就不能抢它的左右子node
2. 不抢当前node，那么可以抢它的左右子node，也可以不抢它的左右子node。根据题目，我们需要记录最大值，所以这种情况下，我们就选择抢或者不抢左node的最大值 + 抢或者不抢右node的最大值
O(n): 遍历每一个node；O(n):since we need stacks to do recursion, and the maximum depth of the recursion is the height of the tree, 
which is O(n) in the worst case and O(log(N)) in the best case.
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rob(self, root: TreeNode) -> int:
        
        def dp(node):
            if not node:
                return [0, 0]
            left = dp(node.left)
            right = dp(node.right)
            
            rob = node.val + left[1] + right[1]
            not_rob = max(left) + max(right)
            
            return[rob, not_rob]
        
        return max(dp(root))
