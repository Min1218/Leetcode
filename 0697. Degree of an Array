Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

 

Example 1:

Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:

Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.
 

Constraints:

nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.

~~~~~~~~~~~
"""
最短的子数组是将 num(出现频率最多) 的第一次出现到最后一次出现的数组
maxs记录元素的最大下标， mins记录元素的最小下标， cnts记录元素的出现个数
O(n); O(n)
"""
class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        maxs, mins, cnt = {}, {}, {}
        for i in range(len(nums)):
            maxs[nums[i]] = max(maxs.get(nums[i], -1), i)
            mins[nums[i]] = min(mins.get(nums[i], float('inf')), i)
            cnt[nums[i]] = cnt.get(nums[i], 0) + 1
        
        degree = max(cnt.values())
        res = len(nums)
        for num in cnt:
            if cnt[num] == degree:
                res = min(res, maxs[num] - mins[num] + 1)
        
        return res
