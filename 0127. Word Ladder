Given two words beginWord and endWord, and a dictionary wordList, return the length of the shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list.
Return 0 if there is no such transformation sequence.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog", return its length 5.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.
 

Constraints:

1 <= beginWord.length <= 100
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the strings in wordList are unique.
~~~~~~~~~~~~
"""
method 1:单向bfs
method 2:双向bfs
时间复杂度：O(NxC^2), N 为 wordList 的长度，C 为列表中单词的平均长度。
建图过程中，对于每一个单词，我们需要枚举它连接到的所有虚拟节点，时间复杂度为O(C)，将这些单词加入到哈希表中，时间复杂度为O(N×C)，
因此总时间复杂度为O(N×C^2)。
广度优先搜索的时间复杂度最坏情况下是O(N×C)。每一个单词需要拓展出O(C) 个虚拟节点，因此节点数O(N×C)。

空间复杂度：哈希表中包含O(N×C) 个节点，每个节点占用空间O(C)，因此总的空间复杂度为 O(NxC^2).
"""
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        # method 2 -> bidirectional breadth first search

        from collections import deque
        word_set = set(wordList)
        if endWord not in word_set:
            return 0
        if beginWord in word_set:
            word_set.remove(beginWord)
        
        visited = set()
        visited.add(beginWord)
        visited.add(endWord)
        
        begin_visited = set()
        begin_visited.add(beginWord)
        
        end_visited = set()
        end_visited.add(endWord)
        
        word_len = len(beginWord)
        step = 1
        
        while begin_visited and end_visited:
            if len(begin_visited) > len(end_visited):
                begin_visited, end_visited = end_visited, begin_visited
                
            next_level_visited = set()
            for word in begin_visited:
                word_list = list(word)
                
                for j in range(word_len):
                    origin_chr = word_list[j]
                    for k in range(26):
                        word_list[j] = chr(ord('a') + k)
                        next_word = ''.join(word_list)
                        if next_word in word_set:
                            if next_word in end_visited: #
                                return step + 1
                            if next_word not in visited:
                                visited.add(next_word)
                                next_level_visited.add(next_word)
                        word_list[j] = origin_chr
            step += 1
            begin_visited = next_level_visited
        return 0
        
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        # method 1: bfs
        from collections import deque
        if endWord not in wordList:
            return 0
        word_set = set(wordList)
        visited = set(beginWord)
        word_len = len(beginWord)
        step = 1
        
        que = deque()
        que.append(beginWord)
        
        while que:
            size = len(que)
            for i in range(size):
                word = que.popleft()
                word_list = list(word)
                for j in range(word_len):
                    origin_chr = word_list[j]

                    for k in range(26):
                        word_list[j] = chr(ord('a') + k)
                        next_word = ''.join(word_list)
                        if next_word in word_set:
                            if next_word == endWord:
                                return step + 1
                            if next_word not in visited:
                                visited.add(next_word)
                                que.append(next_word)
                    word_list[j] = origin_chr
            step += 1
            
        return 0
