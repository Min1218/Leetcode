The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 231.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.

~~~~~~~
"""
reference: https://leetcode-cn.com/problems/hamming-distance/solution/yi-ming-ju-chi-by-leetcode/

XOR位运算：当且仅当输入为不同时输出为1
1.逐位右移
O(1)，在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。
O(1)，使用恒定大小的空间。
2.Brian Kernighan's Algorithm：优化1的方法 ->遇到最右边的1后，跳过中间的0，然后找到下一个1.
xor = xor & (xor - 1)
O(1), O(1)
"""
class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
        xor = x ^ y
        res = 0
        while xor:
            res += 1
            xor = xor & (xor - 1)
        return res
        
        # xor = x ^ y
        # res = 0
        # while xor:
        #     if xor % 2:
        #         res += 1
        #     xor = xor >> 1
        # return res
