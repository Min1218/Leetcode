Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.

In case of a tie, return the minimum such integer.

Notice that the answer is not neccesarilly a number from arr.

 

Example 1:

Input: arr = [4,9,3], target = 10
Output: 3
Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.
Example 2:

Input: arr = [2,3,5], target = 10
Output: 5
Example 3:

Input: arr = [60864,25176,27249,21296,20204], target = 56803
Output: 11361
 

Constraints:

1 <= arr.length <= 10^4
1 <= arr[i], target <= 10^5
~~~~~~~~~~~~~~`

"""
reference:https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target/solution/er-fen-cha-zhao-by-liweiwei1419-2/
使用二分法确定一个整数 threshold（就是题目中说的 value），使得这个 threshold 下，「转变后的数组」的和最接近目标值 target；
「转变」的规则是：严格大于 threshold 的元素变成 threshold，那么 threshold 越大，「转变后的数组」的和越大，这是「单调性」（注意说得具体一点是：单调不减，因为有些情况下，阈值扩大以后，和可能不变）。

O(logn); O(1)
"""
class Solution:
    def findBestValue(self, arr: List[int], target: int) -> int:
        arr.sort(reverse=1)
        size = len(arr)
        left, right = 0, arr[0]
        
        while left < right:
            mid = left + (right - left + 1) // 2
            if self.getSum(arr, mid) > target:
                right = mid - 1
            else:
                left = mid
        
        sum1 = self.getSum(arr, left)
        sum2 = self.getSum(arr, left + 1)
        
        if abs(target - sum1) <= abs(sum2 - target):
            return left
        return left + 1
    
    def getSum(self, arr, t):
        res = 0
        for num in arr:
            res += min(num, t)
        return res
