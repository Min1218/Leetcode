Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

Example 1:

Input: ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16 
Explanation: The two words can be "abcw", "xtfn".
Example 2:

Input: ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4 
Explanation: The two words can be "ab", "cd".
Example 3:

Input: ["a","aa","aaa","aaaa"]
Output: 0 
Explanation: No such pair of words.
 

Constraints:

0 <= words.length <= 10^3
0 <= words[i].length <= 10^3
words[i] consists only of lowercase English letters.

~~~~~~~~~~~~~~~
"""
nt有32位，英文小写字符只有26个，所以，对于一个字符串，把其出现过的字符对应到int上去，
那么这个int就能当做这个字符串的摘要，表示这个这个字符串中都有哪些字符。
O(n^2) + l: n is no. of words and l is a total length of all words together
O(n): hashmap of n words
"""
class Solution:
    def maxProduct(self, words: List[str]) -> int:
        res = 0
        d = collections.defaultdict(int) # int
        n = len(words) 
        
        for i in range(n):
            w = words[i]
            for c in w:
                d[w] |= 1 << (ord(c) - ord('a'))
            
            for j in range(i):
                if not d[words[i]] & d[words[j]]:
                    res = max(res, len(words[i]) * len(words[j]))
                    
        return res
