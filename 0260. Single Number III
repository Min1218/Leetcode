Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

Follow up: Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

 

Example 1:

Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.
Example 2:

Input: nums = [-1,0]
Output: [-1,0]
Example 3:

Input: nums = [0,1]
Output: [1,0]
 

Constraints:

2 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
Each integer in nums will appear twice, only two integers will appear once.

~~~~~~~~~~~
"""
先用 异或运算 = mask 代表只出现1次的2个数；diff = mask & (-mask)保留位中最右边的1，这为只出现1次的2个数的差异，要么来自于x，要么来自于y；
用mask来分离x，y；那么另外一个 y = mask ^ x
O(n); O(1)
"""
class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        mask = nums[0]
        for i in range(1, len(nums)):
            mask ^= nums[i]
        
        diff = mask & (-mask)
        
        x = 0
        for i in range(len(nums)):
            if diff & nums[i]:
                x ^= nums[i]
        
        return [x, mask ^ x]
