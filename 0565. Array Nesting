A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.

Suppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]… By that analogy, we stop adding right before a duplicate element occurs in S.

 

Example 1:

Input: A = [5,4,0,3,1,6,2]
Output: 4
Explanation: 
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

One of the longest S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
 

Note:

N is an integer within the range [1, 20,000].
The elements of A are all distinct.
Each element of A is an integer within the range [0, N-1].

~~~~~~~~

"""
DFS + 记忆化
https://leetcode-cn.com/problems/array-nesting/solution/shu-zu-qian-tao-by-leetcode/
观察到：当前嵌套中的元素形成一个循环。因此，不管选择添加到这些标记元素的集合中的第一元素如何，相同的元素将被添加到当前集合。
O(n); O(n)
"""
class Solution:
    def arrayNesting(self, nums: List[int]) -> int:
        visited = [0 for i in range(len(nums))]
        res = 0
        for i in range(len(nums)):
            cur, cnt = i, 0
            while not visited[cur]:
                cnt += 1
                visited[cur] = 1
                cur = nums[cur]
            res = max(res, cnt)
            
        return res
