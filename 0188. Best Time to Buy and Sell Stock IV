You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Notice that you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

0 <= k <= 100
0 <= prices.length <= 1000
0 <= prices[i] <= 1000
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

"""
reference:
https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/gu-piao-jiao-yi-xi-lie-cong-tan-xin-dao-dong-tai-g/
这道题理论上和 LeetCode 123（交易次数最多为2） 的解法一样，但是直接提交容易出现超内存的错误，是 DP Table 太大导致的。
有效的交易由买入和卖出构成，至少需要两天；反之，当天买入当天卖出则视为一次无效交易。如果题目给定的最大交易次数 k<=n/2，这个 k 是可以有效约束交易次数的；如果给定的 k>n/2 ，那这个 k 实际上起不到约束作用了，可以认为 k=+inf，本题退化为 LeetCode 122（不限交易次数).
题目整体思路是判断 k 和 n/2 的大小关系，两个分支分别用 LeetCode 123 和 LeetCode 122 的代码解决，可有效防止内存超出。
Time Complexity: if 2k≤n , O(n) if 2k>n, where n is the length of the prices sequence, since we have two for-loop.
Space Complexity:O(nk) without state-compressed, and O(k) with state-compressed
"""
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        size = len(prices)
        if size <= 1:
            return 0
        if k >= size // 2: # 退化为不限制交易次数
            profit = 0
            for i in range(1, size):
                if prices[i] > prices[i - 1]:
                    profit += prices[i] - prices[i - 1]
            return profit
        else:
            dp = [ [[0, 0] for i in range(k + 1) ] for j in range(size)]
            for i in range(size):
                dp[i][0][0] = 0
                dp[i][0][1] = -float('inf')
            for j in range(1, k + 1):
                dp[0][j][0] = 0
                dp[0][j][1] = -prices[0]
            for i in range(1, size):
                for j in range(1, k + 1):
                    dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])
                    dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i])
        
            return dp[-1][-1][0]
