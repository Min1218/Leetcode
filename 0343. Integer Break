Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.

Example 1:

Input: 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.
Example 2:

Input: 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.
Note: You may assume that n is not less than 2 and not larger than 58.

~~~~~~~~~~~~~~~~
"""
动态规划
当i≥2时，假设对正整数i 拆分出的第一个正整数是j(1≤j<i），则有以下两种方案：
将i 拆分成j 和i−j 的和，且i−j 不再拆分成多个正整数，此时的乘积是j×(i−j)；
将i 拆分成j 和i−j 的和，且i−j 继续拆分成多个正整数，此时的乘积是j×dp[i−j]。
O(n*n): 对于从2 到n 的每一个整数都要计算对应的dp 值，计算一个整数对应的 dp 值需要O(n) 的时间复杂度
O(n):dp的size
"""
class Solution:
    def integerBreak(self, n: int) -> int:
        dp = [0] * (n + 1)
        for i in range(2, n + 1):
            for j in range(i):
                dp[i] = max(dp[i], j * (i - j), j * dp[i - j])
        
        return dp[n]
