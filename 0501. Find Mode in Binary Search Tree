Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 

For example:
Given BST [1,null,2,2],

   1
    \
     2
    /
   2
 

return [2].

Note: If a tree has more than one mode, you can return them in any order.

Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).

~~~~~~~~~~~~~~~~~`
"""
中序遍历
O(n), O(1) 根据题目暂不考虑recursion占用的栈空间
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findMode(self, root: TreeNode) -> List[int]:
        count = 0
        maxCount = 0
        pre = None
        res = []
        
        def inorder(node):
            nonlocal maxCount, res, pre, count
            if not node:
                return 
            inorder(node.left)
            
            if node.val == pre:
                count += 1
            else:
                count = 1
            if count > maxCount:
                res = [node.val]
                maxCount = count
            elif count == maxCount:
                res.append(node.val)
            pre = node.val
            
            inorder(node.right)
            
        inorder(root)
        return res
# class Solution:
#     def findMode(self, root: TreeNode) -> List[int]:
#         if not root:
#             return None
#         mp = {}
#         def traverse(root):
#             if root:
#                 mp[root.val] = mp.get(root.val, 0) + 1

#             if root.left:
#                 traverse(root.left)
#             if root.right:
#                 traverse(root.right)
#         traverse(root)
#         # print (max(mp.values()))
#         return [key for key, value in mp.items() if value == max(mp.values())]

