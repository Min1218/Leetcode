Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.

You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)

Return the maximum profit you can make.

Example 1:
Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
Buying at prices[0] = 1
Selling at prices[3] = 8
Buying at prices[4] = 4
Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Note:

0 < prices.length <= 50000.
0 < prices[i] < 50000.
0 <= fee < 50000.
~~~~~~~~~~~~~~~~~~~~~~~

"""
method 1: dp
DP Table 是二维的，两个维度分别是天数（0,1,...,n-1）和是否持有股票（1 表持有，0 表不持有）。
两种状态：
case 1：今天没有有股票
(1)昨天就没有股票，今天没有任何操作
(2)昨天有股票，今天卖出股票，收获了一笔钱,同时要交操作费
case 2：今天又股票
(1)昨天有股票，今天没有任何操作
(2)昨天卖出股票，今天买了股票，花费一笔钱
dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee)
dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
状态转移方程中卖出股票，要产生交易费。
reference: https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/gu-piao-jiao-yi-xi-lie-cong-tan-xin-dao-dong-tai-g/
O(n); O(n)
Method 2: dp O(n); O(1)
"""
class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        
        # method 1
        if len(prices) <= 1:
            return 0
        size = len(prices)
        cash, hold = 0, -prices[0]
        
        for i in range(1, size):
            cash = max(cash, hold + prices[i] - fee)
            hold = max(hold, cash - prices[i])
        
        return cash
            
#         # Method 2
#         if len(prices) <= 1:
#             return 0
#         size = len(prices)
#         dp = [ [0] * 2 for i in range(size)]
#         dp[0][1] = -prices[0]
        
#         for i in range(1, size):
#             dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee)
#             dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
        
#         return dp[-1][0]
        
