Given a sorted linked list, delete all duplicates such that each element appear only once.

Example 1:

Input: 1->1->2
Output: 1->2
Example 2:

Input: 1->1->2->3->3
Output: 1->2->3

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        """
        if cur.val == cur.next.val, we change the next pointer of the current node
        so that it skips the next node and points to the one after the next node.
        O(n); O(1)
        """
        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:

        cur = head
        while cur and cur.next:
            if cur.val == cur.next.val:
                cur.next = cur.next.next
            else:
                cur = cur.next
        return head
        # if not head:
        #     return head
        # pre = dummy = head
        # cur = head.next
        # while cur:
        #     if pre.val != cur.val:
        #         pre.next = cur
        #         pre = pre.next
        #     cur = cur.next
        # pre.next = None
        # return dummy
