Given the head of a linked list, remove the nth node from the end of the list and return its head.

Follow up: Could you do this in one pass?

Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:

Input: head = [1], n = 1
Output: []

Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

~~~~~~~~~~~~
        """
        one pass algorithm
        use 2 pointers, 1st pointer advances the list by n + 1 steps from the beginning, while 2nd pointer starts from the begining of the list.
        Advance both pointers together until the 1st pointer past the last node, then 2nd pointer will be pointer at the nth node from the last.
        """
    
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """

        if not head:
            return head
        
        dummy = ListNode()
        dummy.next = head
        first, second = dummy, dummy #可以避免edge case: [1], 1
        for i in range(n+1):
            first = first.next
        while first:
            first = first.next
            second = second.next
        second.next = second.next.next
        return dummy.next #不用head，可以避免edge case: [1], 1
