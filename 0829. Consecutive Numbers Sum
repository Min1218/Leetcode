Given a positive integer N, how many ways can we write it as a sum of consecutive positive integers?

Example 1:

Input: 5
Output: 2
Explanation: 5 = 5 = 2 + 3
Example 2:

Input: 9
Output: 3
Explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4
Example 3:

Input: 15
Output: 4
Explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5
Note: 1 <= N <= 10 ^ 9.

~~~~~~~~~~~~~~~~~~~~~~
"""
reference: https://leetcode-cn.com/problems/consecutive-numbers-sum/solution/pythonchao-hao-li-jie-de-onsuan-fa-by-yybeta/
# 1个数时，必然有一个数可构成N
# 2个数若要构成N，第2个数与第1个数差为1，N减掉这个1能整除2则能由商与商+1构成N
# 3个数若要构成N，第2个数与第1个数差为1，第3个数与第1个数的差为2，N减掉1再减掉2能整除3则能由商、商+1与商+2构成N
# 依次内推，当商即第1个数小于等于0时结束

O(N^0.5); O(1)
"""
class Solution:
    def consecutiveNumbersSum(self, N: int) -> int:
        
        res = 0
        num = 1
        while N > 0:
            if N % num == 0:
                res += 1
            N -= num
            num += 1
        return res
