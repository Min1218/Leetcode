Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false.

A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.

 

Example 1:


Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]
Output: true
Explanation:
In the above grid, the diagonals are:
"[9]", "[5, 5]", "[1, 1, 1]", "[2, 2, 2]", "[3, 3]", "[4]".
In each diagonal all elements are the same, so the answer is True.
Example 2:


Input: matrix = [[1,2],[2,2]]
Output: false
Explanation:
The diagonal "[1, 2]" has different elements.
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 20
0 <= matrix[i][j] <= 99
 

Follow up:

What if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?
What if the matrix is so large that you can only load up a partial row into the memory at once?

~~~~~~~~~~~~
"""
1. 对角线法
   如果两个元素位于一条对角线上r1 - c1 = r2 - c2
   O(m*n); O(m + n)
2. 判断：第一行的[0:n-1]是否等于第2行的[1:]
   O(m*n); O(n)
"""
class Solution:
    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:
        pre = matrix[0]
        for row in matrix[1:]:
            if pre[:-1] != row[1:]:
                return False
            pre = row
        
        return True
#         groups = {}
#         for r, row in enumerate(matrix):
#             for c, val in enumerate(row):
#                 if r - c not in groups:
#                     groups[r - c] = val
#                 elif groups[r - c] != val:
#                     return False
        
#         return True
