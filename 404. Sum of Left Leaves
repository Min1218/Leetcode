
Find the sum of all left leaves in a given binary tree.

Example:

    3
   / \
  9  20
    /  \
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.

~~~~~~~~~~~~~~~~~`
"""
recursion
O(n): 遍历整棵树的时间 n - no. of trees; 
O(n)：调用栈占用的空间
1.先明确什么时候左叶子节点
2.递归深度搜索每一个node，判定是否是左叶子节点，如果是，将其value加到res中
https://leetcode-cn.com/problems/sum-of-left-leaves/solution/pythondi-gui-qiu-jie-zuo-xie-zi-zhi-he-by-airesear/
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumOfLeftLeaves(self, root: TreeNode) -> int:
        res = 0
        
        def findLeftLeaves(node):
            nonlocal res
            if not node:
                return
            if node.left and not node.left.left and not node.left.right:
                res += node.left.val
            findLeftLeaves(node.left)
            findLeftLeaves(node.right)
            return res
        
        if not root:
            return res
        return findLeftLeaves(root)
