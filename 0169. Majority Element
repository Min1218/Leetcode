Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-231 <= nums[i] <= 231 - 1
 

Follow-up: Could you solve the problem in linear time and in O(1) space?
~~~~~~~~~~~~~~~~

"""
1. hashmap:
O(n); O(n)
2. majority定义
O(n); O(1)
"""
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        # method 2
        cnt, num = 0, None
        for ele in nums:
            if cnt == 0:
                num, cnt = ele, 1
            elif ele == num:
                cnt += 1
            else:
                cnt -= 1
        return num
                
        # # method 1
        # count = dict()
        # for num in nums:
        #     count[num] = count.get(num, 0) + 1
        # for num in count:
        #     if count[num] >= 0.5 * len(nums):
        #         return num
