Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
 

Follow up: Solve it both recursively and iteratively.
~~~~~~~~~~~~~~
"""
需要从node的left 和 right开始判断
O(n); O(n)
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        # iteration
        if not root:
            return True
        q = collections.deque([root, root])
        while q:
            t1, t2 = q.popleft(), q.popleft()
            if not t1 and not t2:
                continue # not return True
            elif not t1 or not t2:
                return False
            if t1.val != t2.val:
                return False
            q.append(t1.left)
            q.append(t2.right)
            q.append(t1.right)
            q.append(t2.left)
        
        return True
#         def check(node1, node2):
#             if not node1 and not node2 :
#                 return True
#             elif not node1 or not node2:
#                 return False
#             if node1.val != node2.val: #
#                 return False
#             return check(node1.left, node2.right) and check(node1.right, node2.left)
        
#         if not root:
#             return True
#         return check(root.left, root.right)
    
