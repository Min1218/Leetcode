Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
Follow up:

A linked list can be reversed either iteratively or recursively. Could you implement both?

~~~~~~~~~~
        #算法:iterative
        #traverse the list, need two pointers prev, temp to store the previous and the next nodes of the current node,
        #change the current node's next pointer to its previous element, update prev = cur, cur = temp
        # O(n) - n is the list's length; O(1)
        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:

        pre, cur = None, head
        while cur:
            temp = cur.next
            cur.next = pre
            pre = cur
            cur = temp
        
        return pre
