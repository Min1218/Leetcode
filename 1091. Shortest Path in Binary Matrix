In an N by N square grid, each cell is either empty (0) or blocked (1).

A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:

Adjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)
C_1 is at location (0, 0) (ie. has value grid[0][0])
C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])
If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).
Return the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.

 

Example 1:

Input: [[0,1],[1,0]]


Output: 2

Example 2:

Input: [[0,0,0],[1,1,0],[1,1,0]]


Output: 4

 

Note:

1 <= grid.length == grid[0].length <= 100
grid[r][c] is 0 or 1

~~~~~~~~~~~~~~~~~~~~~
"""
O(n); O(n)
"""
class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        directions = [(-1, -1), (-1, 0), (-1, 1), ( 0, -1), ( 0, 1), \
                      ( 1, -1), ( 1, 0), ( 1, 1)]
        from collections import deque
        n = len(grid)
        if not n or grid[0][0] == 1 or grid[n - 1][n - 1] == 1:
            return -1
        if n ==  1:
            return 1
        
        path = deque()
        path.append([0, 0])
        grid[0][0] = 1
        step = 1
        
        while path:
            for i in range(len(path)):
                x, y = path.popleft()
                for direct in directions:
                    new_x, new_y = x + direct[0], y + direct[1]
                    if 0 <= new_x < n and 0 <= new_y < n and not grid[new_x][new_y]:
                        grid[new_x][new_y] = -1
                        path.append([new_x, new_y])
                        if new_x == new_y == n - 1:
                            return step + 1
            step += 1
        
        return -1
                    
        
        
