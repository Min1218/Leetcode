Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

~~~~~~~~~~~~~~~
"""
reference: https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/gu-piao-wen-ti-python3-c-by-z1m/
Method 1:一维动态规划
a. 明确 dp(i) 表示什么: 表示前 ii 天的最大利润
b. 根据 dp(i) 和 dp(i-1) 的关系得出状态转移方程：dp[i]=max(dp[i−1],prices[i]−minprice)
c. 确定初始条件，如 dp(0) = 0。
O(n); O(n)
Method 2: 一个变量记录
在method1方法上简化而来
O(n); O(1)
"""
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # Method 2:
        if not prices or len(prices) == 1:
            return 0
        n = len(prices)
        minprice, maxprice = prices[0], 0
        for i in range(1, n):
            minprice = min(minprice, prices[i])
            maxprice = max(maxprice, prices[i] - minprice)
        return maxprice
    
#         # Method 1
#         if not prices or len(prices) == 1:
#             return 0
#         n = len(prices)
#         dp = [0] * n
#         minprice = prices[0]
        
#         for i in range(1, n):
#             minprice = min(minprice, prices[i])
#             dp[i] = max(dp[i - 1], prices[i] - minprice)
        
#         return dp[-1]
