Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:

Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
 

Note:

There are at least two nodes in this BST.
This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/
~~~~~~~~~~~~~~~~~`
"""
中序遍历
1.可以直接中序遍历存下node的values，然后求最小的diff
2.在1的基础上优化内存，中序遍历的过程中，计算当前节点与上一个节点的绝对差值，同时更新最小绝对差值
O(n), O(n):递归函数的空间复杂度取决于递归的栈深度，而栈的深度在一条链的情况下可以达到O(n)
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getMinimumDifference(self, root: TreeNode) -> int:
        pre, diff = float('inf'), float('inf')
        
        def inorder(node):
            nonlocal pre, diff
            
            if not node:
                return
            inorder(node.left)
            diff = min(diff, abs(pre - node.val))
            pre = node.val
            inorder(node.right)
            return diff
        
        return inorder(root)
    
                     
