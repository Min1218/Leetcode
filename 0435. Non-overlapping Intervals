Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

 

Example 1:

Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
Example 2:

Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.
Example 3:

Input: [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Note:

You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.

~~~~~~~~~~~~~~
"""
贪心选择性质：每一步都做出一个局部最优的选择，最终的结果就是全局最优
按结束时间排序 下一个interval 开始时间 要 > 上一次interval 结束时间
https://leetcode-cn.com/problems/non-overlapping-intervals/solution/tan-xin-suan-fa-zhi-qu-jian-diao-du-wen-ti-by-labu/
O(nlogn);
O(1)
"""
class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        if not intervals:
            return 0
        intervals = sorted(intervals, key=lambda x:x[1])
        print(intervals)
        cnt = 0
        last_end = intervals[0][1]
        for interval in intervals[1:]:
            start, end = interval[0], interval[1]
            if start >= last_end:
                last_end = end
            else:
                cnt += 1
        
        return cnt
        
