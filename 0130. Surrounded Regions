Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example:

X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
Explanation:

Surrounded regions shouldn’t be on the border, which means that any 'O' on the border of the 
board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to 
an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent 
cells connected horizontally or vertically.

~~~~~~~~~~
"""
dfs: https://www.jianshu.com/p/7a060346acc6
首先对边界上每一个 'O' 做深度优先搜索，将与其相连的所有 'O' 改为 '-' 。
然后遍历矩阵，将矩阵中所有 'O' 改为 'X' ，将矩阵中所有 '-' 变为 'O'。
O(m*n); O(m*n)
"""
class Solution:
    directions = [ [-1, 0], [1, 0], [0, -1], [0, 1]]
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m = len(board)
        if not m:
            return board
        n = len(board[0])
        for row in range(m):
            self.dfs(board, m, n, row, 0)
            self.dfs(board, m, n, row, n - 1)
        for col in range(n):
            self.dfs(board, m, n, 0, col)
            self.dfs(board, m, n, m - 1, col)
        
        for i in range(m):
            for j in range(n):
                if board[i][j] == 'O':
                    board[i][j] = 'X'
                elif board[i][j] == '-':
                    board[i][j] = 'O'
    def dfs(self, board, m, n, row, col):
        if 0 <= row < m and 0 <= col < n and board[row][col] == 'O':
            board[row][col] = '-'
            for direct in self.directions:
                next_row = row + direct[0]
                next_col = col + direct[1]
                self.dfs(board, m, n, next_row, next_col)
