Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]
 

Constraints:

-10^9 <= nums1[i], nums2[i] <= 10^9
nums1.length == m + n
nums2.length == n

~~~~~~~~~~~~~~~~~~~
"""
双指针，从后往前
O(m+n); O(1)
"""
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        idx_1, right = m - 1, len(nums1) - 1
        idx_2 = n - 1
        
        while idx_1 >= 0 and idx_2 >= 0:
            if nums1[idx_1] < nums2[idx_2]:
                nums1[right] = nums2[idx_2]
                idx_2 -= 1
                right -= 1
            else:
                nums1[right] = nums1[idx_1]
                idx_1 -= 1
                right -= 1
                
        if idx_2 >= 0:
            nums1[:right + 1] = nums2[:idx_2 + 1]
            
        return nums1
