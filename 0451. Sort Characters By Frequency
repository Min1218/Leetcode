Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

~~~~~~~~~~~~~~~~~`
"""
Method 1: heap - 大根堆
python的heapq实现的是小根堆
O(nlogn); O(n)
Method 2: bucket sort
O(n); O(n)
"""
import heapq
class Solution:
    def frequencySort(self, s: str) -> str:
        # method 2
        mapping = dict()
        res = list()
        for c in s:
            mapping[c] = mapping.get(c, 0) + 1
        bucket = defaultdict(list)
        for c in mapping:
            bucket[mapping[c]].append(mapping[c]*c)

        for i in range(len(s), -1, -1):
            if bucket[i]:
                res.extend(bucket[i])
        return ''.join(res)
                
        # # method 1
        # mapping = dict()
        # lst = list()
        # for c in s:
        #     mapping[c] = mapping.get(c, 0) + 1
        # for c in mapping:
        #     for j in range(mapping[c]):
        #         heapq.heappush(lst, [-mapping[c], c])
        # return ''.join([heapq.heappop(lst)[1] for i in range(len(lst))])
        
