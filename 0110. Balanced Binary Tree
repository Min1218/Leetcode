Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104

~~~~~~~~~~~
"""
tree上的每一个node的高度都需要balance
1. 无剪枝： 
O(nlogn); O(n) recursion stack
2. 剪枝：将高度不均衡的node的height设为 -1
O(n); O(n)
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        def height(node):
            if not node:
                return 0
            left = height(node.left)
            if left == -1:
                return  -1
            right = height(node.right)
            if right == -1:
                return -1
            return max(left, right) + 1 if abs(left - right) < 2 else -1
        return height(root) != -1
    
#         #自底向上
#         def height(node):
#             if not node:
#                 return 0
#             left = height(node.left)
#             right = height(node.right)

#             return max(left, right) + 1 
        
#         if not root:
#             return True
#         left = height(root.left)
#         right = height(root.right)
#         if abs(left - right) > 1:
#             return False
        
#         return self.isBalanced(root.left) and self.isBalanced(root.right)
