Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.


Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:

Input: l1 = [], l2 = []
Output: []
Example 3:

Input: l1 = [], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.
~~~~~~~~~~~~~~~~

        """
        # iteration
        edge cases
        we check val of two heads to add the smaller one to the result linkedlist, (eg l1)
        then we update l1 to the next node, also update the l3 to the next node. we 
        iteratively do the above steps until one of node is None. l3 points to the non-empty list.
        O(m + n); O(m + n)
        """
        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:

        if not l1:
            return l2
        if not l2:
            return l1
        l3 = ListNode(None)
        dummy = l3
        while l1 and l2:
            if l1.val < l2.val:
                l3.next = l1
                l1 = l1.next
            else:
                l3.next = l2
                l2 = l2.next
            l3 = l3.next
            
        # 
        l3.next = l1 or l2
    
        return dummy.next
            
