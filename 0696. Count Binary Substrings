Give a string s, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.

Substrings that occur multiple times are counted the number of times they occur.

Example 1:
Input: "00110011"
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: "0011", "01", "1100", "10", "0011", and "01".

Notice that some of these substrings repeat and are counted the number of times they occur.

Also, "00110011" is not a valid substring because all the 0's (and 1's) are not grouped together.
Example 2:
Input: "10101"
Output: 4
Explanation: There are 4 substrings: "10", "01", "10", "01" that have equal number of consecutive 1's and 0's.
Note:

s.length will be between 1 and 50,000.
s will only consist of "0" or "1" characters.

~~~~~~~~~
"""
按字符分组，将相同字符的出现个数添加到list中
O(n); O(n)
进一步优化，linear scan -> 用prev，cur两个变量来存储前一个group的长度和现在group的长度
O(n); O(1)
"""
class Solution:
    def countBinarySubstrings(self, s: str) -> int:
        if not s:
            return 0
        res, prev, cur = 0, 0, 1
        for i in range(1, len(s)):
            if s[i - 1] == s[i]:
                cur += 1
            else:
                res += min(prev, cur)
                prev, cur = cur, 1
        res += min(prev, cur)
        
        return res
#         if not s:
#             return 0
#         nums = []
#         pre = s[0]
#         cur, res = 0, 0
#         for c in s:
#             if c == pre:
#                 cur += 1
#             else:
#                 nums.append(cur)
#                 pre = c
#                 cur = 1
#         nums.append(cur)
        
#         for i in range(len(nums) - 1):
#             res += min(nums[i], nums[i + 1])
        
#         return res
