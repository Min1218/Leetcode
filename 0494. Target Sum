You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:

Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.
 

Constraints:

The length of the given array is positive and will not exceed 20.
The sum of elements in the given array will not exceed 1000.
Your output answer is guaranteed to be fitted in a 32-bit integer.
~~~~~~~~~~~~~~~~~~

"""
背包问题，结合416
reference:
https://leetcode-cn.com/problems/target-sum/solution/dong-tai-gui-hua-dper-wei-shu-zu-fang-fa-he-0-1bei/
O(m*n); O(m*n) m=len(nums), n= target
"""
class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        # method 2: dp一维
        if abs(sum(nums)) < abs(S) or (sum(nums) + S) % 2:
            return 0
        target = (sum(nums) + S) // 2
        dp = [0 for i in range(target + 1)]
        dp[0] = 1
        for i in range(1, len(nums) + 1):
            for j in range(target, -1, -1): #必须从后往前算
                if j >= nums[i - 1]:
                    dp[j] =  dp[j] + dp[j - nums[i - 1]]
                    
        return dp[-1]
        
#         # method 2: dp 二维
#         if abs(sum(nums)) < abs(S) or (sum(nums) + S) % 2: # 目标和太大，必须为整数
#             return 0
        
#         target = (sum(nums) + S) // 2
#         dp = [ [0] * (target + 1) for i in range(len(nums) + 1)]
        
#         dp[0][0] = 1
        
#         for i in range(1, len(nums) + 1):
#             for j in range(target, -1, -1): #可 从后往前， 也可 从前往后
#                 if nums[i - 1] > j: #背包太小，装不下
#                     dp[i][j] = dp[i - 1][j]
#                 else: #不装 和 装 的总和
#                     dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]
        
#         return dp[-1][-1]
