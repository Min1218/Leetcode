Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Note:

The input string length won't exceed 1000.

~~~~~~~~~~~~~
"""
状态： dp[i][j]：表示字符串s在[i, j]区间是否一个回文字符穿
边界条件; 特殊情况
状态转移方程：从右下方开始，因为当前的状态是由其左下的状态决定
O(n^2); O(n^2)
"""
class Solution:
    def countSubstrings(self, s: str) -> int:
        if not s:
            return 0
        n = len(s)
        dp = [[False]* n for i in range(n)]
        res = n 
        
        # 边界条件
        for i in range(n):
            dp[i][i] = True
            
        for i in range(n - 1, -1, -1):
            for j in range(i + 1, n):
                if s[i] == s[j]:
                    if j - i == 1:
                        dp[i][j] = True #特殊情况 'aa'
                    else:
                        dp[i][j] = dp[i + 1][j - 1]
                if dp[i][j]:
                    res += 1
        
        return res
