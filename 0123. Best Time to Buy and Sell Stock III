Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
Example 4:

Input: prices = [1]
Output: 0
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105
~~~~~~~~~~~~~~~~~~~~~~~

"""
DP Table 是三维的，维度分别是天数（0,1,...,n-1），交易次数j， 和是否持有股票（1 表持有，0 表不持有）。
两种状态：
case 1：今天没有有股票
(1)昨天就没有股票，今天没有任何操作
(2)昨天有股票，今天卖出股票，收获了一笔钱,同时要交操作费
case 2：今天有股票
(1)昨天有股票，今天没有任何操作
(2)昨天卖出股票，今天买了股票，花费一笔钱
dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i]) # 右边:今天卖了昨天持有的股票，所以两天买入股票的次数都是j
dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i]) #右边:昨天没有持股而今天买入一只，故昨天买入的次数是j-1
https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/gu-piao-jiao-yi-xi-lie-cong-tan-xin-dao-dong-tai-g/
"""
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        size = len(prices)
        if size <= 1:
            return 0
        
        dp = [ [[0, 0] for i in range(3)] for j in range(size)]
        # 边界状态需要考虑：1.j=0时对i穷举; 2.i=0时对有效的j穷举(j=1,2)
        for i in range(size):
            dp[i][0][0] = 0
            dp[i][0][1] = -float('inf')
        for j in range(1, 3):
            dp[0][j][0] = 0
            dp[0][j][1] = -prices[0]
        
        for i in range(1, size):
            for j in range(1, 3):
                dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])
                dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i])
        
        return dp[-1][-1][0]
                
