Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
Example 2:

Input: n = 1, k = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20
1 <= k <= n

~~~~~~~~~~~~~~`
"""
回溯算法 - 剪枝条件优化:剩余数字个数应该大于 剩余组合的数字个数
Time complexity : O(k*C^k_N),C^k_N为从N中取k的组合个数
space complexit：O(C^k_N)
"""
class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        def backtrack(i, n, path, res):
            if len(path) == k:
                res.append(path[:])
                return 
            for j in range(i, n + 1):
                # 剪枝条件优化:剩余数字个数应该大于 剩余组合的数字个数
                if n - j + 1 < k - len(path):
                    continue
                path.append(j)
                backtrack(j + 1, n, path, res)
                path.pop()
            return res
        
        if not n:
            return []
        res, path = [], []        
        
        backtrack(1, n, path, res)
        
        return res
            
