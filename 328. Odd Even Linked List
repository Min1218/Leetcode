Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL
Example 2:

Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL
 

Constraints:

The relative order inside both the even and odd groups should remain as it was in the input.
The first node is considered odd, the second node even and so on ...
The length of the linked list is between [0, 10^4].

~~~~~~~~~~~~~~~~~
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def oddEvenList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        """
        traverse the original LinkedList with 3 pointes cur, odd and even. cur is the odd node of the original list, so odd points to cur and even points to cur.next.
        O(n) - n: no. of nodes in the original LinkedList; O(1)
        """
        if not head:
            return head
        
        oddHead, evenHead = ListNode(), ListNode()
        cur, odd, even = head, oddHead, evenHead
        while cur and cur.next:
            odd.next = cur
            even.next = cur.next
            odd = odd.next
            even = even.next
            cur = cur.next.next
        if cur:
            odd.next = cur
            odd = odd.next
        odd.next = evenHead.next
        even.next = None #[1,2,3,4,5]otherwise, even最后也指向5
        
        return oddHead.next
