A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each 
letter appears in at most one part, and return a list of integers representing the size of these parts.

 

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
 

Note:

S will have length in range [1, 500].
S will consist of lowercase English letters ('a' to 'z') only.

~~~~~~~~~
"""
reference: https://leetcode-cn.com/problems/partition-labels/solution/hua-fen-zi-mu-qu-jian-by-leetcode-solution/
贪心算法 
先记录每个字符出现的最后位置，然后遍历S中的字符，记录每个字符的end'的最大值，判断当前idex 与 end是否是相等的关系
O(n); O(26)
"""
class Solution:
    def partitionLabels(self, S: str) -> List[int]:
        idx = [0] * 26
        res = list()
        start = end = 0

        for i in range(len(S)):
            idx[ord(S[i]) - ord('a')] = i
        
        for i in range(len(S)):
            end = max(end, idx[ord(S[i]) - ord('a')])            
            if i == end:
                res.append(end - start + 1)
                start = end + 1
        
        return res
        
        
