Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10
~~~~~~~~~~~~~~~

"""
回溯
time complexity: O(N*N!). It takes N steps to generate a single permutation. Since there are in total N! possible permutations, 
at most it would take us N⋅N! steps to generate all permutations, simply assuming that there is no 
overlapping effort (which is not true).
Space complexity: O(N*N!).除答案数组以外O(N*N!)，递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，
这里可知递归调用深度为O(N)。
"""
class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        
        def backtrack(nums, path, res, visited, size):
            if len(path) == size:
                res.append(path[:])
                return res
            for j in range(size):
                if not visited[j]:
                    if j > 0 and nums[j - 1] == nums[j] and not visited[j - 1]:
                        continue
                    visited[j] = True
                    path.append(nums[j])
                    backtrack(nums, path, res, visited, size)
                    path.pop()
                    visited[j] = False
                        
        size = len(nums)
        if not size:
            return []
        res, path = [], []
        visited = [False] * size
        nums.sort()
        backtrack(nums, path, res, visited, size)
        
        return res
