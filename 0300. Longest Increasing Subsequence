Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-104 <= nums[i] <= 104
 

Follow up:

Could you come up with the O(n2) solution?
Could you improve it to O(n log(n)) time complexity?
~~~~~~~~~~~~~~~~
"""
Method 1:动态规划
reference:
https://leetcode-cn.com/problems/maximum-length-of-pair-chain/solution/chuan-shang-yi-fu-wo-jiu-bu-ren-shi-ni-liao-lai--2/
O(n^2); O(n)
Method 2:贪心算法 + 二分查找
https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-dong-tai-gui-hua-2/
O(nlogn); O(n)
"""
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        # method 2
        size = len(nums)
        if not size:
            return 0
        tail = [0] * size
        res = 0
        for num in nums:
            left, right = 0, res
            while left < right:
                mid = (left + right) // 2
                if tail[mid] < num:
                    left = mid + 1
                else:
                    right = mid
            tail[left] = num
            if right == res:
                res += 1
        return res
        
#         # method 1
#         size = len(nums)
#         if not size:
#             return 0
#         dp = [1] * size
        
#         for i in range(size):
#             for j in range(i):
#                 if nums[i] > nums[j]:
#                     dp[i] = max(dp[i], dp[j] + 1)
        
#         return max(dp)
