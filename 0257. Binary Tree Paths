Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

~~~~~~~~~~~~~~~~~~~
"""
时间复杂度：O(N^2)其中N 表示节点数目。在深度优先搜索中每个节点会被访问一次且只会被访问一次，每一次会对 path 变量进行拷贝构造，
时间代价为O(N)，故时间复杂度为 O(N^2).
空间复杂度：O(N^2)，其中 N 表示节点数目。除答案数组外我们需要考虑递归调用的栈空间。在最坏情况下，
当二叉树中每个节点只有一个孩子节点时，即整棵二叉树呈一个链状，此时递归的层数为 N，此时每一层的 path 
变量的空间代价的总O(N^2).最好情况下，当二叉树为平衡二叉树时，
它的高度为logN，此时空间复杂度为 O((\log {N})^2).

"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        def dfs(node, path):
            if node:
                path += str(node.val)
                if not node.left and not node.right:
                    res.append(path)
                else:
                    path += '->'
                    dfs(node.left, path)
                    dfs(node.right, path)
        
        path, res = '', []
        dfs(root, path)
        return res
        
