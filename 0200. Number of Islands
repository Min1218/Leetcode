Given an m x n 2d grid map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

~~~~~~~~~~~~~~~
"""
dfs
O(m*n); O(m*n)
"""
class Solution:
    directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]
    def numIslands(self, grid: List[List[str]]) -> int:
        m = len(gr"""
dfs
O(m*n); O(m*n)
"""id)
        if not m:
            return 0
        n = len(grid[0])
        marked = [ [False for i in range(n)] for j in range(m)]
        cnt = 0
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1' and not marked[i][j]:
                    self.dfs(grid, m, n, i, j, marked)
                    cnt += 1
        return cnt
    
    def dfs(self, grid, m, n, i, j, marked):
        marked[i][j] = True
        for direct in self.directions:
            next_i = i + direct[0]
            next_j = j + direct[1]
            if 0 <= next_i < m and 0 <= next_j < n and grid[next_i][next_j] == '1' and not marked[next_i][next_j]:
                self.dfs(grid, m, n, next_i, next_j, marked)
