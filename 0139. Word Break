Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false
~~~~~~~~~~~~~~~~~~~
"""
动态规划算法，dp[i]表示s前i个字符能否拆分
转移方程：dp[j] = dp[i] && check(s[i+1, j]);
check(s[i+1, j])就是判断i+1到j这一段字符是否能够拆分, 这等价于s[i+1, j]是否是wordDict中的元素
reference：https://leetcode-cn.com/problems/word-break/solution/dan-ci-chai-fen-ju-jue-zhuang-xcong-jian-dan-de-xi/
Time complexity : O(n^3). There are two nested loops, and substring computation at each iteration. 
Space complexity : O(n).
"""
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        n = len(s)
        wordSet = {word for word in wordDict}
        dp = [False] * (n + 1)
        dp[0] = True
        
        for i in range(n):
            if dp[i] == True:   
                for j in range(i + 1, n + 1):
                    if s[i: j] in wordSet:
                        dp[j] = True
        
        return dp[-1]
