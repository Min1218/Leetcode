There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
 

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5

~~~~~~~~~
"""
利用广度优先 建立 入度表
reference: https://leetcode-cn.com/problems/course-schedule/solution/course-schedule-tuo-bu-pai-xu-bfsdfsliang-chong-fa/
O(m + n); O(m + n)
"""
from collections import deque
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        visited = 0

        indegree = [ 0 for i in range(numCourses)]
        edges = [[] for i in range(numCourses)]
        que = deque()
        # Get the indegree and adjacency of every course
        for cur, pre in prerequisites:
            indegree[cur] += 1
            edges[pre].append(cur)
            
        # Get all the courses with 0 indegree
        for i in range(numCourses):
            if indegree[i] == 0:
                que.append(i)
        
        while que:
            pre = que.popleft()
            visited += 1
            for nex in edges[pre]:
                indegree[nex] -= 1
                if indegree[nex] == 0:
                    que.append(nex)
        
        return visited == numCourses
