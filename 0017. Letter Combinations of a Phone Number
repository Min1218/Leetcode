Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

~~~~~~~~~~~~~~~~~~~~~~
"""
回溯/bfs
Time complexity : O(3^N x 4^M), where N is the number of digits in the input that maps to 3 letters 
and M is the number of digits in the input that maps to 4 letters, and N+M is the total number digits in the input.
Space complexity : O(3^N x 4^M) since one has to keep 3^N x 4^M3 solutions.
"""
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        phone = {'2': ['a', 'b', 'c'],
                 '3': ['d', 'e', 'f'],
                 '4': ['g', 'h', 'i'],
                 '5': ['j', 'k', 'l'],
                 '6': ['m', 'n', 'o'],
                 '7': ['p', 'q', 'r', 's'],
                 '8': ['t', 'u', 'v'],
                 '9': ['w', 'x', 'y', 'z']}
        
        def findCombinations(combination, next_digits):
            if len(next_digits) == 0:
                res.append(combination)
            else:
                for letter in phone[next_digits[0]]:
                    findCombinations(combination + letter, next_digits[1:])
        
        res = []
        if digits:
            findCombinations("", digits)
        return res
