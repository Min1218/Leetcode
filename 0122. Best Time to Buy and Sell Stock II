Say you have an array prices for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 3 * 10 ^ 4
0 <= prices[i] <= 10 ^ 4
~~~~~~~~~~~~~

"""
Method 2：动态规划
reference: https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/gu-piao-jiao-yi-xi-lie-cong-tan-xin-dao-dong-tai-g/
每天都有三种动作：买入（buy）、卖出（sell）、无操作（rest）
因为不限制交易次数，因此交易次数这个因素不影响题目，不必考虑。DP Table 是二维的，两个维度分别是天数（0,1,...,n-1）和是否持有股票
（1 表持有，0 表不持有）。
状态转移方程
Case 1，今天我没有股票，有两种可能:
 （1）昨天我没有股票， 今天不做任何操作
 （2）昨天我有股票，今天按照市价卖了，收获了一笔钱
Case 2, 今天我有股票，有两种可能：
 （2）昨天我有股票，今天不做任何操作
 （1）昨天我没有股票， 今天按照市价买的股票，花费了一笔钱
dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])
dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])
O(n); O(n)
Method 2:贪心算法：价格上涨，就卖股票赚钱；价格下跌，不操作
O(n); O(1)
"""
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # 动态规划
        if not len(prices):
            return 0
        size = len(prices)
        dp = [[0] * 2 for i in range(size)]
        dp[0][1] = - prices[0]
        
        for i in range(1, size):
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])
            
        return dp[-1][0] #返回最后一天手上没有股票的获利
    
#         #贪心算法
#         if not len(prices):
#             return 0
#         res = 0
#         buy = prices[0]
        
#         for price in prices[1:]:
#             if price > buy:
#                 res += price -buy
#                 buy = price
#             else:
#                 buy = price
        
#         return res
        
