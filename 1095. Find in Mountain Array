(This problem is an interactive problem.)

You may recall that an array A is a mountain array if and only if:

A.length >= 3
There exists some i with 0 < i < A.length - 1 such that:
A[0] < A[1] < ... A[i-1] < A[i]
A[i] > A[i+1] > ... > A[A.length - 1]
Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target.  If such an index doesn't exist, return -1.

You can't access the mountain array directly.  You may only access the array using a MountainArray interface:

MountainArray.get(k) returns the element of the array at index k (0-indexed).
MountainArray.length() returns the length of the array.
Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer.  Also, any solutions that attempt to circumvent the judge will result in disqualification.

 

Example 1:

Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.
Example 2:

Input: array = [0,1,2,4,2,1], target = 3
Output: -1
Explanation: 3 does not exist in the array, so we return -1.
 

Constraints:

3 <= mountain_arr.length() <= 10000
0 <= target <= 10^9
0 <= mountain_arr.get(index) <= 10^9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

"""
reference: 
看视频https://leetcode-cn.com/problems/find-in-mountain-array/solution/shan-mai-shu-zu-zhong-cha-zhao-mu-biao-zhi-by-leet/
code：https://leetcode-cn.com/problems/find-in-mountain-array/solution/shi-yong-chao-hao-yong-de-er-fen-fa-mo-ban-python-/
先找到peak处；判断0-peak_idx是否存在target，若存在直接返回；
若不存在，搜索peak_idx到结尾是否存在target
时间复杂度：O(logn)，我们进行了三次二分搜索，每次的时间复杂度都为O(logn)。
空间复杂度：O(1)O(1)，只需要常数的空间存放若干变量。

二分法特点：
每一轮区间被划分成 2 部分，理解 区间划分 决定中间数取法（ 无需记忆，需要练习 + 理解 ），在调试的过程中理解 区间和中间数划分的配对关系：
划分 [left, mid] 与 [mid + 1, right] ，mid 被分到左边，对应 int mid = left + (right - left) / 2;；
划分 [left, mid - 1] 与 [mid, right] ，mid 被分到右边，对应 int mid = left + (right - left + 1) / 2;。
至于为什么划分是这种对应关系，原因在于区间只有 2 个数的时候，如果中间数的取法不对，一旦进入的分支不能使得区间缩小，会出现 死循环。
"""
# """
# This is MountainArray's API interface.
# You should not implement it, or speculate about its implementation
# """
#class MountainArray:
#    def get(self, index: int) -> int:
#    def length(self) -> int:

class Solution:
    
    def findInMountainArray(self, target: int, mountain_arr: 'MountainArray') -> int:
        size = mountain_arr.length()
        #1. find peak location
        peak_idx = self.findPeak(mountain_arr, 0, size - 1)
        if mountain_arr.get(peak_idx) == target:
            return peak_idx
        #2. find if target is in left part
        res = self.findLeft(mountain_arr, 0, peak_idx - 1, target)
        if res != -1:
            return res
        #3. find if target is in right part
        return self.findRight(mountain_arr, peak_idx, size - 1, target)
        
    def findPeak(self, mountain_arr, left, right):
        while left < right:
            mid = left + (right - left + 1) // 2
            if mountain_arr.get(mid - 1) > mountain_arr.get(mid):
                right = mid - 1
            else:
                left = mid
        return left
    # def findLeft(self, ):
    def findLeft(self, mountain_arr, left, right, target):
        while left < right:
            mid = left + (right - left + 1) // 2
            if mountain_arr.get(mid) > target:
                right = mid - 1
            else:
                left = mid

        return left if mountain_arr.get(left) == target else -1

    def findRight(self, mountain_arr, left, right, target):
        while left < right:
            mid = left + (right - left + 1) // 2
            if mountain_arr.get(mid) < target:
                right = mid - 1
            else:
                left = mid
        return left if mountain_arr.get(left) == target else -1
