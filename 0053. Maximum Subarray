Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [0]
Output: 0
Example 4:

Input: nums = [-1]
Output: -1
Example 5:

Input: nums = [-2147483647]
Output: -2147483647
 

Constraints:

1 <= nums.length <= 2 * 104
-231 <= nums[i] <= 231 - 1

~~~~~~~~~~~~
"""
reference: https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/
1. 贪心算法：若当前指针所指元素之前的和 <0, 则丢弃当前之前的元素
O(n); O(1)
2. 分治 - 待补充
reference: https://leetcode-cn.com/problems/maximum-subarray/solution/dong-tai-gui-hua-fen-zhi-fa-python-dai-ma-java-dai/
"""
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # Method 1
        if not nums:
            return 0
        if len(nums) == 1:
            return nums[0]
        
        res = nums[0]
        presum = nums[0]
        for i in range(1, len(nums)):
            presum = max(nums[i], presum + nums[i])
            res = max(res, presum)
        
        return res
       
#         # method 2: 分治
        
#         if not nums:
#             return 0
#         left, right = 0,  len(nums) - 1
        
#         return self.__max_sub_array(nums, 0, len(nums) - 1)
    
#     def __max_sub_array(self, nums, left, right):
#         if left == right:
#             return nums[left]
#         mid = (left + right) // 2
        
#         return max(self.__max_sub_array(nums, left, mid), self.__max_sub_array(nums, mid + 1, right),
#                    self.__max_cross_array(nums, left, mid, right))
    
#     def __max_cross_array(self, nums, left, mid, right):
#         # 一定包含 nums[mid] 元素的最大连续子数组的和，
#         # 思路是看看左边"扩散到底"，得到一个最大数，右边"扩散到底"得到一个最大数
#         # 然后再加上中间数
#         left_sum_max = 0
#         start_left = mid - 1
#         sl = 0
#         while start_left >= left:
#             sl += nums[start_left]
#             left_sum_max = max(left_sum_max, sl)
#             start_left -= 1
        
#         right_sum_max = 0
#         start_right = mid + 1
#         sr = 0
#         while start_right <= right:
#             sr += nums[start_right]
#             right_sum_max = max(right_sum_max, sr)
#             start_right += 1
        
#         return left_sum_max + nums[mid] + right_sum_max
